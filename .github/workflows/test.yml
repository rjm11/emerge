name: EMERGE Testing Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run EMERGE Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        lua-version: ['5.1', '5.2', '5.3']
        include:
          - lua-version: '5.1'
            primary: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Lua ${{ matrix.lua-version }}
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: ${{ matrix.lua-version }}
        
    - name: Verify Lua installation
      run: |
        lua -v
        which lua
        
    - name: Make test script executable
      run: chmod +x ./run_tests.sh
      
    - name: List test files
      run: ./run_tests.sh --list
      
    - name: Run EMERGE tests
      run: ./run_tests.sh --verbose
      id: test-run
      
    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-failure-logs-lua-${{ matrix.lua-version }}
        path: |
          test/*.log
          test/*.out
        retention-days: 7
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && matrix.primary
      uses: actions/github-script@v7
      with:
        script: |
          const testResult = '${{ steps.test-run.outcome }}';
          const emoji = testResult === 'success' ? '‚úÖ' : '‚ùå';
          const status = testResult === 'success' ? 'PASSED' : 'FAILED';
          
          const comment = `## ${emoji} EMERGE Tests ${status}
          
          **Lua Version:** ${{ matrix.lua-version }}
          **Status:** ${status}
          
          ${testResult === 'success' ? 
            'üéâ All tests passed! The EMERGE framework is ready for development.' :
            '‚ö†Ô∏è Some tests failed. Please check the logs above for details.'}
            
          ### Test Coverage
          - ‚úÖ Mudlet API Mocking
          - ‚úÖ EMERGE Manager Registration  
          - ‚úÖ Event System Validation
          - ‚úÖ Module Dependency Resolution
          - ‚úÖ Architecture Compliance
          
          *Automated test results from EMERGE Testing Framework*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  compatibility-check:
    name: Lua Compatibility Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Lua 5.1 (Primary Target)
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: '5.1'
        
    - name: Check Lua 5.1 Compatibility
      run: |
        echo "üîç Checking EMERGE modules for Lua 5.1 compatibility..."
        
        # Check for Lua 5.2+ features that might break 5.1 compatibility
        echo "Scanning for incompatible patterns..."
        
        # Check for goto statements (5.2+)
        if grep -r "goto" --include="*.lua" . | grep -v test; then
          echo "‚ùå Found 'goto' statements (Lua 5.2+ feature)"
          exit 1
        fi
        
        # Check for bitwise operators (5.3+) 
        if grep -r "<<\|>>\|&\||\|~" --include="*.lua" . | grep -v test | grep -v "string\|comment"; then
          echo "‚ùå Found bitwise operators (Lua 5.3+ feature)"
          exit 1
        fi
        
        # Check for integer division (5.3+)
        if grep -r "//" --include="*.lua" . | grep -v test | grep -v comment; then
          echo "‚ùå Found integer division operator (Lua 5.3+ feature)"
          exit 1
        fi
        
        echo "‚úÖ No Lua 5.2+ incompatibilities found"
        
    - name: Validate Module Structure
      run: |
        echo "üîç Validating EMERGE module structure..."
        
        # Check that modules follow EMERGE patterns
        for module in $(find . -name "*.lua" -not -path "./test/*" -not -name "run_tests.sh"); do
          echo "Checking $module..."
          
          # Check for event-driven patterns (no direct module calls)
          if grep -q "emerge\.[^e][^v][^e][^n][^t][^s]\." "$module" 2>/dev/null; then
            echo "‚ö†Ô∏è  $module may have direct module calls (non-event-driven)"
          fi
          
          # Check for proper module structure
          if grep -q "local.*=.*{}" "$module" && grep -q "return.*" "$module"; then
            echo "‚úÖ $module follows proper module structure"
          fi
        done
        
        echo "‚úÖ Module structure validation complete"

  performance-check:
    name: Performance Baseline
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Lua 5.1
      uses: leafo/gh-actions-lua@v10  
      with:
        luaVersion: '5.1'
        
    - name: Run Performance Tests
      run: |
        echo "üöÄ Running EMERGE performance baseline tests..."
        
        # Time the test suite execution
        start_time=$(date +%s%N)
        ./run_tests.sh --verbose
        end_time=$(date +%s%N)
        
        # Calculate execution time in milliseconds
        execution_time=$(( (end_time - start_time) / 1000000 ))
        
        echo "üìä Test Suite Performance:"
        echo "  Execution Time: ${execution_time}ms"
        echo "  Target: <30000ms (30 seconds)"
        
        # Check if within performance target
        if [ $execution_time -gt 30000 ]; then
          echo "‚ö†Ô∏è  Test suite took longer than 30 seconds"
          echo "Consider optimizing slow tests or mocking more efficiently"
        else
          echo "‚úÖ Test suite performance within target"
        fi
        
        # Save performance data
        echo "execution_time_ms=$execution_time" >> $GITHUB_OUTPUT
        
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Scan for Security Issues
      run: |
        echo "üîí Scanning EMERGE modules for security issues..."
        
        # Check for potential security issues in Lua code
        security_issues=0
        
        # Check for eval-like patterns
        if grep -r "loadstring\|load(" --include="*.lua" . | grep -v test; then
          echo "‚ö†Ô∏è  Found loadstring/load usage - review for security"
          ((security_issues++))
        fi
        
        # Check for system command execution
        if grep -r "os\.execute\|io\.popen" --include="*.lua" . | grep -v test; then
          echo "‚ö†Ô∏è  Found system command execution - review for security"
          ((security_issues++))
        fi
        
        # Check for hardcoded credentials (simple patterns)
        if grep -r "password\s*=\s*['\"]" --include="*.lua" . | grep -v test; then
          echo "‚ùå Found potential hardcoded passwords"
          ((security_issues++))
        fi
        
        if [ $security_issues -eq 0 ]; then
          echo "‚úÖ No obvious security issues found"
        else
          echo "‚ö†Ô∏è  Found $security_issues potential security issues"
          echo "Please review the warnings above"
        fi